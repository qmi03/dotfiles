# export XDG_CONFIG_HOME="$HOME/.config"
# Set the directory we want to store zinit and plugins
ZINIT_HOME="${XDG_DATA_HOME:-${HOME}/.local/share}/zinit/zinit.git"
declare -A ZINIT
ZINIT[NO_ALIASES]=1

# Download Zinit, if it's not there yet
if [ ! -d "$ZINIT_HOME" ]; then
  mkdir -p "$(dirname $ZINIT_HOME)"
  git clone https://github.com/zdharma-continuum/zinit.git "$ZINIT_HOME"
fi

# Source/Load zinit
source "${ZINIT_HOME}/zinit.zsh"

# Download tpm (tmux plugin manager), if it's not there yet
TPM_HOME="${HOME}/.tmux/plugins/tpm"
if [ ! -d "$TPM_HOME" ]; then
  mkdir -p "$(dirname $TPM_HOME)"
  git clone https://github.com/tmux-plugins/tpm "$TPM_HOME"
  echo "Installed tpm (tmux plugin manager) to $TPM_HOME"
  echo "Don't forget to add the tpm configuration to your ~/.tmux.conf file!"
fi


# Init oh-my-posh
eval "$(oh-my-posh init zsh --config ~/.config/oh-my-posh/tokyonight_storm.qmi.toml)"

# Hook direnv
export DIRENV_LOG_FORMAT=""
eval "$(direnv hook zsh)"
# # Check if 'thefuck' is installed
# if command -v thefuck &> /dev/null; then
#     eval $(thefuck --alias)
# else
#     :  # Do nothing if 'thefuck' is not installed
# fi

# Add zsh plugins - load autosuggestions immediately
zinit for zsh-users/zsh-autosuggestions

# Load other plugins with delay for better startup performance
zinit lucid wait for \
  zsh-users/zsh-completions \
  Aloxaf/fzf-tab \
  MichaelAquilina/zsh-you-should-use

zinit lucid wait='!0' atload'zicompinit; zicdreplay' for zdharma-continuum/fast-syntax-highlighting


# Add snippets
zinit snippet OMZP::tmux
zinit snippet OMZP::command-not-found

export PATH="$PATH:/Users/qmi/.local/bin"


autoload -U compinit && compinit -C


zinit cdreplay -q

# Keybindings
bindkey -e # Emacs
bindkey '^p' history-search-backward
bindkey '^n' history-search-forward

# History
HISTSIZE=5000
HISTFILE=~/.zsh_history
SAVEHIST=$HISTSIZE
HISTDUP=erase
setopt appendhistory
setopt sharehistory
setopt hist_ignore_space
setopt hist_ignore_all_dups
setopt hist_save_no_dups
setopt hist_ignore_dups
setopt hist_find_no_dups
setopt inc_append_history
setopt hist_reduce_blanks


# Completion styling
zstyle ':completion:*' use-cache on
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Za-z}'
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"
zstyle ':completion:*' menu no
zstyle ':fzf-tab:complete:cd:*' fzf-preview 'ls --color $realpath'
zstyle ':fzf-tab:complete:__zoxide_z:*' fzf-preview 'ls --color $realpath'

# Aliases
alias zshconfig="nvim ~/.zshrc"

alias ls='ls --color'
alias lsa='ls -lAh'

alias oke="echo oke"
alias cool="echo cool"

alias cat='bat -p -P'


alias antlr4py3='java org.antlr.v4.Tool -Dlanguage=Python3 -o target'
alias installdir='dirname "$(pwd)"'
alias pygrun='python3 "$(installdir)"/bin/pygrun'
alias antlr4='java -jar /usr/local/lib/antlr-4.9.2-complete.jar -o target'
alias grun='java org.antlr.v4.runtime.misc.TestRig'
alias dev='nix develop -c $SHELL'


# Shell integrations
eval "$(fzf --zsh)"
eval "$(zoxide init zsh)"
function cd() {
  if [ "$#" -eq 0 ]; then
    if [ -n "$TMUX" ]; then
      local session_path=$(tmux display-message -p "#{session_path}")
      if [ -n "$session_path" ] && [ -d "$session_path" ]; then
        __zoxide_z "$session_path"
        return
      fi
    fi
    # Fall back to home directory if not in tmux or session path is invalid
    __zoxide_z ~
  else
    __zoxide_z "$@"
  fi
}

# Add this to ~/.zshrc
watch_xampp_logs() {
  local log_dir="/Applications/XAMPP/xamppfiles/logs"
  local logs=("access_log" "error_log" "php_error_log" "ssl_request_log")
  if [ -n "$TMUX" ]; then
    tmux new-window -n xampp_logs \; send-keys "tail -f $log_dir/${logs[1]}" C-m \; split-window -v \; send-keys "tail -f $log_dir/${logs[2]}" C-m \; select-pane -t 0 \; split-window -h \; send-keys "tail -f $log_dir/${logs[4]}" C-m \; select-pane -t 2 \; split-window -h \; send-keys "tail -f $log_dir/${logs[3]}" C-m
  else
    tmux new-session -s xampp_monitor -n xampp_logs -c "$(pwd)" \; send-keys "tail -f $log_dir/${logs[1]}" C-m \; split-window -v \; send-keys "tail -f $log_dir/${logs[2]}" C-m \; select-pane -t 0 \; split-window -h \; send-keys "tail -f $log_dir/${logs[4]}" C-m \; select-pane -t 2 \; split-window -h \; send-keys "tail -f $log_dir/${logs[3]}" C-m
  fi
}

cheatsh() {
    curl cheat.sh/"$1"
}

# Preferred editor for local and remote sessions
if [[ -n $SSH_CONNECTION ]]; then
  export EDITOR='vim'
else
  export EDITOR='nvim'
fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

################################################################################ 
# ZSH PLUGINS VARIABLES
# tmux
export ZSH_TMUX_AUTOSTART=false
export ZSH_TMUX_AUTOSTART_ONCE=true
export ZSH_TMUX_AUTOCONNECT=true
export ZSH_TMUX_AUTOQUIT=ZSH_TMUX_AUTOSTART
# ZSH_TMUX_CONFIG	Set the configuration path (default: $HOME/.tmux.conf, $XDG_CONFIG_HOME/tmux/tmux.conf)
# ZSH_TMUX_DEFAULT_SESSION_NAME	Set tmux default session name when autostart is enabled
export ZSH_TMUX_AUTONAME_SESSION=true
export ZSH_TMUX_DETACHED=false
# ZSH_TMUX_FIXTERM	Sets $TERM to 256-color term or not based on current terminal support
# ZSH_TMUX_FIXTERM_WITHOUT_256COLOR	$TERM to use for non 256-color terminals (default: tmux if available, screen otherwise)
export ZSH_TMUX_FIXTERM_WITH_256COLOR=true	# $TERM to use for 256-color terminals (default: tmux-256color if available, screen-256color otherwise)
# ZSH_TMUX_ITERM2	Sets the -CC option for iTerm2 tmux integration (default: false)
# ZSH_TMUX_UNICODE	Set tmux -u option to support unicode
################################################################################ 

################################################################################ 
# Software initialize from here

# Ollama
export OLLAMA_HOST=localhost:11435

# ANTLR
export ANTLR_JAR=/usr/local/lib/antlr-4.9.2-complete.jar
export CLASSPATH=".:/usr/local/lib/antlr-4.9.2-complete.jar:$CLASSPATH"

# pnpm
export PNPM_HOME="$HOME/.local/share/pnpm/bin"
export PATH="$PNPM_HOME:$PATH"

# Haskell
[ -f "/Users/qmi/.ghcup/env" ] && source "/Users/qmi/.ghcup/env" # ghcup-env

# cargo
export PATH="$HOME/.cargo/bin:$PATH"

# Zig
export PATH="$HOME/zig-bootstrap-0.14.0-dev.2064+b5cafe223/out/zig-aarch64-macos-none-baseline:$PATH"

# eval "$(pixi completion --shell zsh)"

# llvm
export PATH="/opt/homebrew/opt/llvm/bin:$PATH"
export LDFLAGS="-L/opt/homebrew/opt/llvm/lib"
export CPPFLAGS="-I/opt/homebrew/opt/llvm/include"
export NIXPKGS_ALLOW_UNFREE=1
