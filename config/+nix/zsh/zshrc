# export XDG_CONFIG_HOME="$HOME/.config"
# Set the directory we want to store zinit and plugins
ZINIT_HOME="${XDG_DATA_HOME:-${HOME}/.local/share}/zinit/zinit.git"
declare -A ZINIT
ZINIT[NO_ALIASES]=1

# Download Zinit, if it's not there yet
if [ ! -d "$ZINIT_HOME" ]; then
  mkdir -p "$(dirname $ZINIT_HOME)"
  git clone https://github.com/zdharma-continuum/zinit.git "$ZINIT_HOME"
fi

# Source/Load zinit
source "${ZINIT_HOME}/zinit.zsh"

# Download tpm (tmux plugin manager), if it's not there yet
TPM_HOME="${HOME}/.tmux/plugins/tpm"
if [ ! -d "$TPM_HOME" ]; then
  mkdir -p "$(dirname $TPM_HOME)"
  git clone https://github.com/tmux-plugins/tpm "$TPM_HOME"
  echo "Installed tpm (tmux plugin manager) to $TPM_HOME"
  echo "Don't forget to add the tpm configuration to your ~/.tmux.conf file!"
fi


# Init oh-my-posh
eval "$(oh-my-posh init zsh --config ~/.config/oh-my-posh/tokyonight_storm.qmi.toml)"

# Hook direnv
export DIRENV_LOG_FORMAT=""
eval "$(direnv hook zsh)"

# Add zsh plugins - load autosuggestions immediately
zinit for zsh-users/zsh-autosuggestions

# Load other plugins with delay for better startup performance
zinit lucid wait for \
  zsh-users/zsh-completions \
  Aloxaf/fzf-tab \
  MichaelAquilina/zsh-you-should-use

zinit lucid wait='!0' atload'zicompinit; zicdreplay' for zdharma-continuum/fast-syntax-highlighting


# Add snippets
zinit snippet OMZP::command-not-found

export PATH="$PATH:/Users/qmi/.local/bin"


if type brew &>/dev/null; then
  FPATH=$(brew --prefix)/share/zsh-completions:$FPATH

  autoload -Uz compinit
  compinit
fi

zinit cdreplay -q

# Keybindings
bindkey -e # Emacs
bindkey '^p' history-search-backward
bindkey '^n' history-search-forward

# History
HISTSIZE=5000
HISTFILE=~/.zsh_history
SAVEHIST=$HISTSIZE
HISTDUP=erase
setopt appendhistory
setopt sharehistory
setopt hist_ignore_space
setopt hist_ignore_all_dups
setopt hist_save_no_dups
setopt hist_ignore_dups
setopt hist_find_no_dups
setopt inc_append_history
setopt hist_reduce_blanks


# Completion styling
zstyle ':completion:*' use-cache on
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Za-z}'
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"
zstyle ':completion:*' menu no
zstyle ':fzf-tab:complete:cd:*' fzf-preview 'ls --color $realpath'
zstyle ':fzf-tab:complete:__zoxide_z:*' fzf-preview 'ls --color $realpath'

# Aliases
alias zshconfig="nvim ~/.zshrc"

alias ls='ls --color'
alias lsa='ls -lAh'

alias oke="echo oke"
alias cool="echo cool"

alias cat='bat -p -P'


alias antlr4py3='java org.antlr.v4.Tool -Dlanguage=Python3 -o target'
alias installdir='dirname "$(pwd)"'
alias pygrun='python3 "$(installdir)"/bin/pygrun'
alias antlr4='java -jar /usr/local/lib/antlr-4.9.2-complete.jar -o target'
alias grun='java org.antlr.v4.runtime.misc.TestRig'
alias dev='nix develop -c $SHELL'


# Shell integrations
eval "$(fzf --zsh)"
eval "$(zoxide init zsh)"
function cd() {
  if [ "$#" -eq 0 ]; then
    if [ -n "$TMUX" ]; then
      local session_path=$(tmux display-message -p "#{session_path}")
      if [ -n "$session_path" ] && [ -d "$session_path" ]; then
        __zoxide_z "$session_path"
        return
      fi
    fi
    # Fall back to home directory if not in tmux or session path is invalid
    __zoxide_z ~
  else
    __zoxide_z "$@"
  fi
}

# Add this to ~/.zshrc
watch_xampp_logs() {
  local log_dir="/Applications/XAMPP/xamppfiles/logs"
  local logs=("access_log" "error_log" "php_error_log" "ssl_request_log")
  if [ -n "$TMUX" ]; then
    tmux new-window -n xampp_logs \; send-keys "tail -f $log_dir/${logs[1]}" C-m \; split-window -v \; send-keys "tail -f $log_dir/${logs[2]}" C-m \; select-pane -t 0 \; split-window -h \; send-keys "tail -f $log_dir/${logs[4]}" C-m \; select-pane -t 2 \; split-window -h \; send-keys "tail -f $log_dir/${logs[3]}" C-m
  else
    tmux new-session -s xampp_monitor -n xampp_logs -c "$(pwd)" \; send-keys "tail -f $log_dir/${logs[1]}" C-m \; split-window -v \; send-keys "tail -f $log_dir/${logs[2]}" C-m \; select-pane -t 0 \; split-window -h \; send-keys "tail -f $log_dir/${logs[4]}" C-m \; select-pane -t 2 \; split-window -h \; send-keys "tail -f $log_dir/${logs[3]}" C-m
  fi
}

cheatsh() {
    curl cheat.sh/"$1"
}

# Preferred editor for local and remote sessions
if [[ -n $SSH_CONNECTION ]]; then
  export EDITOR='vim'
else
  export EDITOR='nvim'
fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

################################################################################ 
# Simple tmux aliases - extracted from oh-my-zsh plugin

# Helper function to build smart tmux aliases
function _build_tmux_alias {
  setopt localoptions no_rc_expand_param
  eval "function $1 {
    if [[ -z \$1 ]] || [[ \${1:0:1} == '-' ]]; then
      tmux $2 \"\$@\"
    else
      tmux $2 $3 \"\$@\"
    fi
  }"
 
  # Set up tab completion
  local f s
  f="_tmux_alias_${1}"
  s=(${(z)2})
  eval "function ${f}() {
    shift words;
    words=(tmux ${@:2} \$words);
    ((CURRENT+=${#s[@]}+1))
    _tmux
  }"
  compdef "$f" "$1"
}

# Create the smart aliases
_build_tmux_alias "ta" "attach" "-t"
_build_tmux_alias "tad" "attach -d" "-t" 
_build_tmux_alias "ts" "new-session" "-s"
_build_tmux_alias "tkss" "kill-session" "-t"

# Clean up the builder function
unfunction _build_tmux_alias

# Simple aliases
alias tksv='tmux kill-server'
alias tl='tmux list-sessions'
alias tmuxconf='$EDITOR ~/.config/tmux/tmux.conf'

# Directory-based session function
function tds() {
  local dir=${PWD##*/}
  local md5=$(printf '%s' "$PWD" | md5sum | cut -d ' ' -f 1)
  local session_name="${dir}-${md5:0:6}"
 
  # Create session if it doesn't exist (detached)
  tmux has-session -t "$session_name" 2>/dev/null || tmux new-session -d -s "$session_name" -c "$PWD"
 
  if [[ -n "$TMUX" ]]; then
    # Switch to the session
    tmux switch-client -t "$session_name"
  else
    # Attach to the session
    tmux attach-session -t "$session_name"
  fi
}

# Auto-start tmux after zsh loads
if [[ -z "$TMUX" && -z "$INSIDE_EMACS" && -z "$VIM" && "$__CFBundleIdentifier" != "org.yanex.marta" ]]; then
  if tmux has-session 2>/dev/null && [[ $(tmux list-sessions 2>/dev/null | wc -l) -gt 1 ]]; then
    tmux attach \; choose-tree -sZ -O time
  else
    tmux attach 2>/dev/null || cd ~/dotfiles && tds
  fi
fi
################################################################################ 

################################################################################ 
# Software initialize from here

# Ollama
export OLLAMA_HOST=localhost:11435

# ANTLR
export ANTLR_JAR=/usr/local/lib/antlr-4.9.2-complete.jar
export CLASSPATH=".:/usr/local/lib/antlr-4.9.2-complete.jar:$CLASSPATH"

# pnpm
export PNPM_HOME="$HOME/.local/share/pnpm/bin"
export PATH="$PNPM_HOME:$PATH"

# Haskell
[ -f "/Users/qmi/.ghcup/env" ] && source "/Users/qmi/.ghcup/env" # ghcup-env

# cargo
export PATH="$HOME/.cargo/bin:$PATH"

# Zig
export PATH="$HOME/zig-bootstrap-0.14.0-dev.2064+b5cafe223/out/zig-aarch64-macos-none-baseline:$PATH"

# eval "$(pixi completion --shell zsh)"

# llvm
export PATH="/opt/homebrew/opt/llvm/bin:$PATH"
export LDFLAGS="-L/opt/homebrew/opt/llvm/lib"
export CPPFLAGS="-I/opt/homebrew/opt/llvm/include"
export CPLUS_INCLUDE_PATH="/opt/homebrew/opt/llvm/include/"
export NIXPKGS_ALLOW_UNFREE=1
